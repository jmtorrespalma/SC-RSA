SC-RSA. The Simple C RSA-32 implementation.
===========================================

Copyright (C) 2016 Juan Manuel Torres Palma <j.m.torrespalma@gmail.com>
=======================================================================

I.- Summary
===========
This project is an implementation of the RSA algorithm, using a key length of
32 bits. Created with academic purposes to make RSA simpler to understand and
use very basic examples. This is very easily breakable so it's not recommended
for any real life applications. In that case, search for GNU Privacy Guard.

It's very portable for POSIX OS's and only OpenSSL external tool is required to
generate prime numbers. In case you don't want, or can't use it, the file
"primes.txt" includes a list of some prime number generated by me.

Some documentation and a presentations are included, that I used in class
to help other students to understand it.

All the source code, including the docs are open-source and of free
distribution, licensed under GPLv3. Refer to the COPYING file for further
details about this software licensing.

II.- Files
==========
COPYING			License of this program.
README			Introduction and info about the project.

doc/

src/decrypt.c		Program to decrypt a RSA-32 encrypted message.
src/decrypt.c		Program to encrypt a plan text message.
src/gen-key.c		Program for generation of pair of keys.
src/gen-primes.sh	Script to create a list of prime numbers.
src/keyutils.c		Shared functions by project tools.
src/keyutils.h		Public interface of keyutils.c.
src/Makefile		Makefile of the project.

Optional files:
src/key.pri		Private key generated by gen-key.
src/key.pub		Public key generated by gen-key.
src/primes.txt		List of prime numbers needed to generate keys.


III.- Building
==============
To build it, simply go to src directory and type:
	make

IV.- Usage
==========
After compiling, if everything was successful, there must be 3 different
binary files in the src directory.

Step 1: Execute the gen-key program to get our pair of keys ready to
	execute encrypt and decrypt. They must show with names like
	key.pri and key.pub.

Step 2: Create the desired message that you want to encrypt and send
	to your buddy.
		echo -x "You are stupid" > plain-msg.txt

Step 3: Encrypt it using the public key of your friend, or yours if
	you are testing it by yourself.
		./encrypt plain-msg.txt > crypt-msg.txt

Step 4: If doing it with a buddy, send it to him/her. If you are sadly
	alone, skip this step.

Step 5: Decrypt the message. Be patient please, it takes a while :(
		./decrypt crypt-msg.txt

Note: These tools are UNIX compliant so they support piping and are easy to
tweak, as an example, you can do:
	echo -x "UNIX rules!!" | ./encrypt | ./decrypt

V.- Documentation
=================
The best way to learn about this tool is by reading the code, as it is quite
simple. However, for academic purposes a set of files are available in the
doc/ folder.

VI.- TODO
=========
The biggest bottleneck is in the decrypt routine, making it really annoying to
use. That's probably the only thing that should be addressed so far.


